// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FontVertexBuilder
import CommonEntity
import CoreGraphics
import CoreText
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import iGeometry
import iShapeTriangulation
import simd
public typealias GlyphLine = [CommonEntity.f2]
public typealias GlyphLineF3 = [CommonEntity.f3]
public struct LetterPath {
  public var glyphs: [FontVertexBuilder.GlyphLine]
  public var offset: CommonEntity.f2
}
public struct TriangulatedLetterPath {
  public var glyphLines: [FontVertexBuilder.GlyphLineF3]
  public var offset: CommonEntity.f3
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public var shapePoint: iGeometry.Point {
    get
  }
}
extension FontVertexBuilder.GlyphUtil {
  public enum HelperFunctions {
  }
}
extension FontVertexBuilder.GlyphUtil {
  public enum MainFunctions {
    public static let DEPTH: Swift.Int
    public static func adaptiveQubicBezierCurve2(a: CommonEntity.f2, b: CommonEntity.f2, c: CommonEntity.f2, d: CommonEntity.f2, aVel: CommonEntity.f2, bVel: CommonEntity.f2, cVel: CommonEntity.f2, angleLimit: Swift.Float, depth: Swift.Int, line: inout [CommonEntity.f2])
    public static func adaptiveQuadraticBezierCurve2(a: simd.simd_float2, b: simd.simd_float2, c: simd.simd_float2, aVel: simd.simd_float2, bVel: simd.simd_float2, cVel: simd.simd_float2, angleLimit: Swift.Float, depth: Swift.Int, line: inout [simd.simd_float2])
    public static func getGlyphLines(_ glyphPath: CoreGraphics.CGPath, _ angleLimit: Swift.Float, _ distanceLimit: Swift.Float) -> [FontVertexBuilder.GlyphLine]
    public typealias Hole = [iGeometry.Point]
    @_hasMissingDesignatedInitializers public class TriangulateHelperData {
      public var path: [iGeometry.Point]
      public var holes: [FontVertexBuilder.GlyphUtil.MainFunctions.Hole]
      @objc deinit
    }
    public static let TRIANGULATOR: iShapeTriangulation.Triangulator
    public static func triangulate(_ calculatedPaths: [FontVertexBuilder.LetterPath], isClockwiseFont: Swift.Bool) -> [FontVertexBuilder.TriangulatedLetterPath]
    public static func triangulateWithoutLetterOffset(_ calculatedPaths: [FontVertexBuilder.LetterPath], isClockwiseFont: Swift.Bool) -> (paths: [FontVertexBuilder.TriangulatedLetterPath], letterOffsets: [CommonEntity.f3])
  }
}
public enum GlyphUtil {
}
open class VectorText {
  public enum VerticalAlignment : Swift.Int, Swift.Codable {
    case top
    case center
    case bottom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment
  public var textAlignment: CoreText.CTTextAlignment
  public var text: Swift.String
  public var pivot: CommonEntity.f2
  public var textBounds: CoreFoundation.CGSize
  public var kern: Swift.Float
  public var lineSpacing: Swift.Float
  public var fontSize: Swift.Float
  public var lineHeight: Swift.Float {
    get
  }
  public var ascent: Swift.Float {
    get
  }
  public var descent: Swift.Float {
    get
  }
  public var leading: Swift.Float {
    get
  }
  public var unitsPerEm: Swift.Float {
    get
  }
  public var glyphCount: Swift.Float {
    get
  }
  public var underlinePosition: Swift.Float {
    get
  }
  public var underlineThickness: Swift.Float {
    get
  }
  public var slantAngle: Swift.Float {
    get
  }
  public var capHeight: Swift.Float {
    get
  }
  public var xHeight: Swift.Float {
    get
  }
  public var ctFont: CoreText.CTFont
  public var calculatedPaths: [FontVertexBuilder.LetterPath]
  public var isClockwiseFont: Swift.Bool
  public var angleLimit: Swift.Float
  public var suggestFrameSize: CoreFoundation.CGSize? {
    get
  }
  public init(text: Swift.String, fontName: Swift.String = "AppleSDGothicNeo-Bold", fontSize: Swift.Float, bounds: CoreFoundation.CGSize = .zero, pivot: CommonEntity.f2 = .zero, textAlignment: CoreText.CTTextAlignment = .natural, verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment = .center, kern: Swift.Float = 0.0, lineSpacing: Swift.Float = 0.0, isClockwiseFont: Swift.Bool = false)
  @objc deinit
}
extension FontVertexBuilder.VectorText.VerticalAlignment : Swift.Equatable {}
extension FontVertexBuilder.VectorText.VerticalAlignment : Swift.Hashable {}
extension FontVertexBuilder.VectorText.VerticalAlignment : Swift.RawRepresentable {}
