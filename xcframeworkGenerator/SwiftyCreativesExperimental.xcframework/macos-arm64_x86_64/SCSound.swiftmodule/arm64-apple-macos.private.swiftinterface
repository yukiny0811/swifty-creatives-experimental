// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SCSound
import AVFoundation
import Accelerate
import Foundation
import Swift
import _Concurrency
import _StringProcessing
public protocol AudioCapturer {
  var fftResult: [SCSound.FFTResultComponent] { get set }
  var fftNoiseExtractionMethod: SCSound.FFTNoiseExtractionMethod { get set }
  var fftWindowType: SCSound.TempiFFTWindowType { get set }
  var fftMinFreq: Swift.Float { get set }
  var fftMaxFreq: Swift.Float { get set }
  var bandCalculationMethod: SCSound.FFTBandCalculationMethod { get set }
  func start()
  func stop()
}
@objc public class DetailedAudioCapturer : ObjectiveC.NSObject, SCSound.AudioCapturer {
  public var fftResult: [SCSound.FFTResultComponent]
  public var fftNoiseExtractionMethod: SCSound.FFTNoiseExtractionMethod
  public var fftWindowType: SCSound.TempiFFTWindowType
  public var fftMinFreq: Swift.Float
  public var fftMaxFreq: Swift.Float
  public var bandCalculationMethod: SCSound.FFTBandCalculationMethod
  public init(noiseExtractionMethod: SCSound.FFTNoiseExtractionMethod = .none, fftWindowType: SCSound.TempiFFTWindowType = .hanning, fftMinFreq: Swift.Float = 100, fftMaxFreq: Swift.Float = 30000)
  public func start()
  public func stop()
  @objc deinit
}
public enum FFTBandCalculationMethod {
  case linear(Swift.Int)
  case logarithmic(Swift.Int)
}
public enum FFTNoiseExtractionMethod {
  case none
  case freqDomain(Swift.Double)
  case timeDomain(Swift.Double)
}
public struct FFTResultComponent {
  public var frequency: Swift.Float
  public var magnitude: Swift.Float
}
@objc @_hasMissingDesignatedInitializers public class TempiFFT : ObjectiveC.NSObject {
  public var bandMagnitudes: [Swift.Float]! {
    get
  }
  public var bandFrequencies: [Swift.Float]! {
    get
  }
  public var numberOfBands: Swift.Int {
    get
  }
  @objc deinit
  public func magnitudeAtBand(_ inBand: Swift.Int) -> Swift.Float
  public func frequencyAtBand(_ inBand: Swift.Int) -> Swift.Float
  public class func toDB(_ inMagnitude: Swift.Float) -> Swift.Float
}
public enum TempiFFTWindowType : Swift.Int {
  case none
  case hanning
  case hamming
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class FFTVisualizer {
  public var baseUpOffset: Swift.Float
  public var historyCount: Swift.Int
  public var averageMags: [Swift.Float]
  public var freqArray: [Swift.Float]
  public init()
  public func updateData(_ capturer: any SCSound.AudioCapturer)
  @objc deinit
}
@objc public class FastAudioCapturer : ObjectiveC.NSObject, SCSound.AudioCapturer {
  public var fftResult: [SCSound.FFTResultComponent]
  public var fftNoiseExtractionMethod: SCSound.FFTNoiseExtractionMethod
  public var fftWindowType: SCSound.TempiFFTWindowType
  public var fftMinFreq: Swift.Float
  public var fftMaxFreq: Swift.Float
  public var bandCalculationMethod: SCSound.FFTBandCalculationMethod
  convenience public init(noiseExtractionMethod: SCSound.FFTNoiseExtractionMethod = .none, fftWindowType: SCSound.TempiFFTWindowType = .hanning, captureDeviceFindWithName deviceName: Swift.String, fftMinFreq: Swift.Float = 100, fftMaxFreq: Swift.Float = 30000)
  public init(noiseExtractionMethod: SCSound.FFTNoiseExtractionMethod = .none, fftWindowType: SCSound.TempiFFTWindowType = .hanning, captureDevice: AVFoundation.AVCaptureDevice? = AVCaptureDevice.default(for: .audio), fftMinFreq: Swift.Float = 100, fftMaxFreq: Swift.Float = 30000)
  public func start()
  public func stop()
  @objc deinit
}
extension SCSound.FastAudioCapturer : AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension SCSound.TempiFFTWindowType : Swift.Equatable {}
extension SCSound.TempiFFTWindowType : Swift.Hashable {}
extension SCSound.TempiFFTWindowType : Swift.RawRepresentable {}
