// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iShapeTriangulation
import Darwin
import Swift
import _Concurrency
import _StringProcessing
import iGeometry
public enum CentroidNetError : Swift.Error {
  case notValidPath(iGeometry.PlainShape.Validation)
}
public enum DelaunayError : Swift.Error {
  case notValidPath(iGeometry.PlainShape.Validation)
}
public enum TessellationError : Swift.Error {
  case notValidPath(iGeometry.PlainShape.Validation)
}
public enum TriangulationError : Swift.Error {
  case notValidPath(iGeometry.PlainShape.Validation)
}
extension iShapeTriangulation.Delaunay {
  public var convexPolygonsIndices: [Swift.Int] {
    get
  }
}
extension iShapeTriangulation.Delaunay {
  public var trianglesIndices: [Swift.Int] {
    get
  }
}
public struct Delaunay {
  public var points: [iGeometry.IntPoint] {
    get
  }
}
extension iGeometry.PlainShape {
  public func delaunay(maxEdge: Swift.Int64 = 0, extraPoints: [iGeometry.IntPoint]? = nil) throws -> iShapeTriangulation.Delaunay
}
extension iGeometry.PlainShape {
  public func makeCentroidNet(iGeom: iGeometry.IntGeom, onlyConvex: Swift.Bool, maxEdge: Swift.Float, maxArea max: Swift.Float? = nil, minArea: Swift.Float = 0, extraPoints: [iGeometry.IntPoint]? = nil) throws -> [[iGeometry.IntPoint]]
}
extension iGeometry.PlainShape {
  public mutating func modified(maxEgeSize: Swift.Int64) -> iGeometry.PlainShape
  public mutating func modify(maxEgeSize: Swift.Int64)
}
extension iGeometry.PlainShape {
  public mutating func tessellate(iGeom: iGeometry.IntGeom, maxEdge: Swift.Float, maxArea: Swift.Float? = nil, extraPoints: [iGeometry.IntPoint]? = nil) throws -> iShapeTriangulation.Delaunay
}
extension iGeometry.PlainShape {
  public func triangulate(extraPoints: [iGeometry.IntPoint]? = nil) throws -> [Swift.Int]
}
public struct Triangulator {
  public let iGeom: iGeometry.IntGeom
  public init(iGeom: iGeometry.IntGeom)
  public init(precision: Swift.Float = 0.0001)
  public func triangulate(points: [iGeometry.Point]) throws -> [Swift.Int]
  public func triangulate(points: [iGeometry.Point], hull: Swift.ArraySlice<iGeometry.Point>, holes: [Swift.ArraySlice<iGeometry.Point>]?, extraPoints: [iGeometry.Point]?) throws -> [Swift.Int]
  public func triangulateDelaunay(points: [iGeometry.Point]) throws -> [Swift.Int]
  public func triangulateDelaunay(points: [iGeometry.Point], hull: Swift.ArraySlice<iGeometry.Point>, holes: [Swift.ArraySlice<iGeometry.Point>]?, extraPoints: [iGeometry.Point]?) throws -> [Swift.Int]
  public func polygonate(points: [iGeometry.Point], hull: Swift.ArraySlice<iGeometry.Point>, holes: [Swift.ArraySlice<iGeometry.Point>]?) throws -> [Swift.Int]
  public func tessellate(points: [iGeometry.Point], hull: Swift.ArraySlice<iGeometry.Point>, holes: [Swift.ArraySlice<iGeometry.Point>]?, maxEdge: Swift.Float, maxArea: Swift.Float? = nil, extraPoints: [iGeometry.Point]? = nil) throws -> (points: [iGeometry.Point], indices: [Swift.Int])
  public func centroidNet(points: [iGeometry.Point], hull: Swift.ArraySlice<iGeometry.Point>, holes: [Swift.ArraySlice<iGeometry.Point>]?, onlyConvex: Swift.Bool = false, maxEdge: Swift.Float, maxArea: Swift.Float? = nil, minArea: Swift.Float = 0, extraPoints: [iGeometry.Point]? = nil) throws -> [[iGeometry.Point]]
}
