// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftyCreatives
import AppKit
import CoreImage.CIFilterBuiltins
@_exported import CommonEntity
import CoreGraphics
import CoreImage
import CoreText
import FontVertexBuilder
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Metal/*.Metal*/
import Metal
import Metal/*.Metal*/
import Metal
import Metal/*.Metal*/
import Metal
import Metal/*.Metal*/
import Metal
import MetalKit
import MetalPerformanceShaders
import ModelIO
import SCSound
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import simd
import simd/*.simd*/
import simd
import simd/*.simd*/
import simd
public struct LetterCache {
  public var buffer: any Metal.MTLBuffer
  public var verticeCount: Swift.Int
  public var offset: CommonEntity.f2
  public var size: CommonEntity.f2
}
public struct LetterCacheRaw {
  public var vertices: [CommonEntity.f3]
  public var offset: CommonEntity.f2
  public var size: CommonEntity.f2
}
public class VectorTextFactory {
  public var cached: [Swift.Character : SwiftyCreatives.LetterCache]
  public func cacheCharacter(char: Swift.Character)
  public init(fontName: Swift.String = "AppleSDGothicNeo-Bold", fontSize: Swift.Float = 10.0, bounds: CoreFoundation.CGSize = .zero, pivot: CommonEntity.f2 = .zero, textAlignment: CoreText.CTTextAlignment = .natural, verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment = .center, kern: Swift.Float = 0.0, lineSpacing: Swift.Float = 0.0, isClockwiseFont: Swift.Bool = true)
  @objc deinit
}
public class VectorTextFactoryRaw {
  public var cached: [Swift.Character : SwiftyCreatives.LetterCacheRaw]
  public var cachedBuffer: [Swift.Character : SwiftyCreatives.LetterCache]
  public func cacheCharacter(char: Swift.Character)
  public func resetCache(_ char: Swift.Character)
  public func updateCache(_ char: Swift.Character, f: (_ vertices: inout [CommonEntity.f3]) -> ())
  public init(fontName: Swift.String = "AppleSDGothicNeo-Bold", fontSize: Swift.Float = 10.0, bounds: CoreFoundation.CGSize = .zero, pivot: CommonEntity.f2 = .zero, textAlignment: CoreText.CTTextAlignment = .natural, verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment = .center, kern: Swift.Float = 0.0, lineSpacing: Swift.Float = 0.0, isClockwiseFont: Swift.Bool = true)
  @objc deinit
}
@_inheritsConvenienceInitializers open class VectorWord : FontVertexBuilder.VectorText {
  public var posBuffer: (any Metal.MTLBuffer)?
  public var finalVertices: [CommonEntity.f3]
  override public init(text: Swift.String, fontName: Swift.String = "AppleSDGothicNeo-Bold", fontSize: Swift.Float = 10.0, bounds: CoreFoundation.CGSize = .zero, pivot: CommonEntity.f2 = .zero, textAlignment: CoreText.CTTextAlignment = .natural, verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment = .center, kern: Swift.Float = 0.0, lineSpacing: Swift.Float = 0.0, isClockwiseFont: Swift.Bool = true)
  @objc deinit
}
open class VectorWord3D : FontVertexBuilder.VectorText {
  public var posBuffer: (any Metal.MTLBuffer)?
  public var finalVertices: [CommonEntity.f3]
  public var extrudingIndices: [Swift.Int]
  public func extrude(_ value: Swift.Float)
  public init(text: Swift.String, fontName: Swift.String = "AppleSDGothicNeo-Bold", fontSize: Swift.Float = 10.0, bounds: CoreFoundation.CGSize = .zero, pivot: CommonEntity.f2 = .zero, textAlignment: CoreText.CTTextAlignment = .natural, verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment = .center, kern: Swift.Float = 0.0, lineSpacing: Swift.Float = 0.0, isClockwiseFont: Swift.Bool = true, extrudingValue: Swift.Float = 0)
  @objc deinit
}
open class VectorWord3DDetailed : FontVertexBuilder.VectorText {
  public var finalVertices: [CommonEntity.f3]
  public var extrudingIndices: [Swift.Int]
  public var extrudingValue: Swift.Float {
    get
  }
  public var chunkedBlobs: [[CommonEntity.f3]]
  public func extrude(_ value: Swift.Float)
  public init(text: Swift.String, fontName: Swift.String = "AppleSDGothicNeo-Bold", fontSize: Swift.Float = 10.0, bounds: CoreFoundation.CGSize = .zero, pivot: CommonEntity.f2 = .zero, textAlignment: CoreText.CTTextAlignment = .natural, verticalAlignment: FontVertexBuilder.VectorText.VerticalAlignment = .center, kern: Swift.Float = 0.0, lineSpacing: Swift.Float = 0.0, isClockwiseFont: Swift.Bool = true, extrudingValue: Swift.Float = 0)
  @objc deinit
}
public protocol CameraConfigBase {
  static var fov: Swift.Float { get }
  static var near: Swift.Float { get }
  static var far: Swift.Float { get }
  static var easyCameraType: SwiftyCreatives.EasyCameraType { get }
  static var isPerspective: Swift.Bool { get }
}
@_hasMissingDesignatedInitializers public class DefaultOrthoConfig : SwiftyCreatives.CameraConfigBase {
  public static let fov: Swift.Float
  public static let near: Swift.Float
  public static let far: Swift.Float
  public static let easyCameraType: SwiftyCreatives.EasyCameraType
  public static let isPerspective: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MainCameraConfig : SwiftyCreatives.CameraConfigBase {
  public static let fov: Swift.Float
  public static let near: Swift.Float
  public static let far: Swift.Float
  public static let easyCameraType: SwiftyCreatives.EasyCameraType
  public static let isPerspective: Swift.Bool
  @objc deinit
}
public enum EasyCameraType {
  case manual
  case easy(polarSpacing: Swift.Float)
  case flexible
}
public class MainCamera<Config> : SwiftyCreatives.MainCameraBase where Config : SwiftyCreatives.CameraConfigBase {
  public var mainMatrix: [CommonEntity.f4x4]
  public var perspectiveMatrix: [CommonEntity.f4x4]
  public init()
  public func setTranslate(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  public func translate(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  public func setRotation(rad: Swift.Float, axis: CommonEntity.f3)
  public func rotate(rad: Swift.Float, axis: CommonEntity.f3)
  public func rotateAroundX(_ rad: Swift.Float)
  public func rotateAroundY(_ rad: Swift.Float)
  public func rotateAroundZ(_ rad: Swift.Float)
  public func rotateAroundVisibleX(_ rad: Swift.Float)
  public func rotateAroundVisibleY(_ rad: Swift.Float)
  public func rotateAroundVisibleZ(_ rad: Swift.Float)
  public func updatePMatrix()
  public func setFrame(width: Swift.Float, height: Swift.Float)
  public func getCameraPos() -> CommonEntity.f3
  public func screenToWorldDirection(x: Swift.Float, y: Swift.Float, width: Swift.Float, height: Swift.Float) -> (origin: CommonEntity.f3, direction: CommonEntity.f3)
  public func screenToWorldDirection(screenPos: CommonEntity.f2, width: Swift.Float, height: Swift.Float) -> (origin: CommonEntity.f3, direction: CommonEntity.f3)
  public func screenToWorldDirection(screenPos: CommonEntity.f2, viewSize: CommonEntity.f2) -> (origin: CommonEntity.f3, direction: CommonEntity.f3)
  public func mock_rotateAroundVisibleX(_ rad: Swift.Float) -> CommonEntity.f4x4
  @objc deinit
}
public protocol MainCameraBase {
  var mainMatrix: [CommonEntity.f4x4] { get set }
  var perspectiveMatrix: [CommonEntity.f4x4] { get set }
  func translate(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  func rotateAroundX(_ rad: Swift.Float)
  func rotateAroundY(_ rad: Swift.Float)
  func rotateAroundZ(_ rad: Swift.Float)
  func rotateAroundVisibleX(_ rad: Swift.Float)
  func rotateAroundVisibleY(_ rad: Swift.Float)
  func rotateAroundVisibleZ(_ rad: Swift.Float)
  func setTranslate(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  func setRotation(rad: Swift.Float, axis: CommonEntity.f3)
  func mock_rotateAroundVisibleX(_ rad: Swift.Float) -> CommonEntity.f4x4
  func setFrame(width: Swift.Float, height: Swift.Float)
  func screenToWorldDirection(x: Swift.Float, y: Swift.Float, width: Swift.Float, height: Swift.Float) -> (origin: CommonEntity.f3, direction: CommonEntity.f3)
  func screenToWorldDirection(screenPos: CommonEntity.f2, width: Swift.Float, height: Swift.Float) -> (origin: CommonEntity.f3, direction: CommonEntity.f3)
  func screenToWorldDirection(screenPos: CommonEntity.f2, viewSize: CommonEntity.f2) -> (origin: CommonEntity.f3, direction: CommonEntity.f3)
  func getCameraPos() -> CommonEntity.f3
}
public struct Light {
  public init(position: CommonEntity.f3, color: CommonEntity.f3, brightness: Swift.Float, ambientIntensity: Swift.Float, diffuseIntensity: Swift.Float, specularIntensity: Swift.Float)
  public var position: CommonEntity.f3
  public var color: CommonEntity.f3
  public var brightness: Swift.Float
  public var ambientIntensity: Swift.Float
  public var diffuseIntensity: Swift.Float
  public var specularIntensity: Swift.Float
  public static var memorySize: Swift.Int {
    get
  }
}
public struct Material {
  public init(ambient: CommonEntity.f3, diffuse: CommonEntity.f3, specular: CommonEntity.f3, shininess: Swift.Float)
  public var ambient: CommonEntity.f3
  public var diffuse: CommonEntity.f3
  public var specular: CommonEntity.f3
  public var shininess: Swift.Float
  public static var memorySize: Swift.Int {
    get
  }
}
public enum BlendMode {
  case normalBlend
  case add
  case alphaBlend
  public static func == (a: SwiftyCreatives.BlendMode, b: SwiftyCreatives.BlendMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DrawConfigBase {
  static var contentScaleFactor: Swift.Int { get }
  static var blendMode: SwiftyCreatives.BlendMode { get }
  static var clearOnUpdate: Swift.Bool { get }
  static var frameRate: Swift.Int { get }
}
@_hasMissingDesignatedInitializers public class MainDrawConfig : SwiftyCreatives.DrawConfigBase {
  public static let contentScaleFactor: Swift.Int
  public static let blendMode: SwiftyCreatives.BlendMode
  public static let clearOnUpdate: Swift.Bool
  public static let frameRate: Swift.Int
  @objc deinit
}
extension CoreFoundation.CGPoint : Swift.AdditiveArithmetic {
  public static func + (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  public static func - (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  public static func * (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public static func * (lhs: CoreFoundation.CGPoint, rhs: Swift.Float) -> CoreFoundation.CGPoint
  public static func / (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  public static func / (lhs: CoreFoundation.CGPoint, rhs: Swift.Float) -> CoreFoundation.CGPoint
}
extension CoreFoundation.CGSize : Swift.AdditiveArithmetic {
  public static func + (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public static func - (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public static func * (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public static func * (lhs: CoreFoundation.CGSize, rhs: Swift.Float) -> CoreFoundation.CGSize
  public static func / (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  public static func / (lhs: CoreFoundation.CGSize, rhs: Swift.Float) -> CoreFoundation.CGSize
}
extension Swift.Float {
  public static func degreesToRadians(_ deg: Swift.Float) -> Swift.Float
  public func degreesToRadians() -> Swift.Float
}
extension Metal.MTLTexture {
  public var cgImage: CoreGraphics.CGImage? {
    get
  }
}
@_inheritsConvenienceInitializers open class PostProcessor : SwiftyCreatives.PostProcessorBase {
  override public init(functionName: Swift.String, slowFunctionName: Swift.String, bundle: Foundation.Bundle)
  @discardableResult
  public func postProcess(commandBuffer: any Metal.MTLCommandBuffer, texture: any Metal.MTLTexture) -> Swift.Bool
  @objc deinit
}
open class PostProcessorBase {
  public var pipelineState: any Metal.MTLComputePipelineState
  public var savedTexture: (any Metal.MTLTexture)?
  public var args: [Swift.Float]
  public init(functionName: Swift.String, slowFunctionName: Swift.String, bundle: Foundation.Bundle)
  public func setArgs(args: [Swift.Float]) -> Self
  public static func createComputePipelineState(functionName: Swift.String, slowFunctionName: Swift.String, bundle: Foundation.Bundle) -> any Metal.MTLComputePipelineState
  @objc deinit
}
public class BloomPP : SwiftyCreatives.PostProcessorBase {
  public init()
  public func postProcess(commandBuffer: any Metal.MTLCommandBuffer, texture: any Metal.MTLTexture, threshold: Swift.Float, intensity: Swift.Float)
  @objc deinit
}
public class CornerRadiusPP : SwiftyCreatives.PostProcessor {
  public init()
  public func radius(_ rad: Swift.Float) -> Self
  @objc deinit
}
public class PlainPP : SwiftyCreatives.PostProcessor {
  public init()
  @objc deinit
}
public class TextPostProcessor : SwiftyCreatives.PostProcessorBase {
  public init()
  public func postProcessColor(commandBuffer: any Metal.MTLCommandBuffer, originalTexture: any Metal.MTLTexture, texture: any Metal.MTLTexture, color: CommonEntity.f4)
  @objc deinit
}
@_inheritsConvenienceInitializers open class Img : SwiftyCreatives.Primitive<SwiftyCreatives.RectShapeInfo>, SwiftyCreatives.ImageLoadable {
  public init()
  public var texture: (any Metal.MTLTexture)?
  @available(*, unavailable, message: "Use img() in Sketch instead.")
  override public func draw(_ encoder: any Metal.MTLRenderCommandEncoder)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ModelObject : SwiftyCreatives.Primitive<SwiftyCreatives.ModelObjectInfo> {
  public init()
  @discardableResult
  public func loadModel(name: Swift.String, extensionName: Swift.String) -> Self
  public func setTexture(_ tex: any Metal.MTLTexture)
  override public func draw(_ encoder: any Metal.MTLRenderCommandEncoder)
  public func draw(_ encoder: any Metal.MTLRenderCommandEncoder, primitiveType: Metal.MTLPrimitiveType)
  @objc deinit
}
open class HitTestableBox : SwiftyCreatives.ScaleSettable {
  public var scale: CommonEntity.f3 {
    get
  }
  required public init()
  @discardableResult
  public func setScale(_ value: CommonEntity.f3) -> Self
  @objc deinit
}
extension SwiftyCreatives.HitTestableBox {
  public func hitTest(origin: CommonEntity.f3, direction: CommonEntity.f3, testDistance: Swift.Float = 3000) -> CommonEntity.f3?
}
@_inheritsConvenienceInitializers open class HitTestableImg : SwiftyCreatives.RectanglePlanePrimitive<SwiftyCreatives.RectShapeInfo>, SwiftyCreatives.ImageLoadable {
  public init()
  public var texture: (any Metal.MTLTexture)?
  @available(*, unavailable, message: "Use img() in Sketch instead.")
  override public func draw(_ encoder: any Metal.MTLRenderCommandEncoder)
  @available(*, unavailable, message: "Use img() in Sketch instead.")
  override public func drawWithCache(packet: SwiftyCreatives.SCPacket)
  @available(*, unavailable, message: "Use img() in Sketch instead.")
  override public func drawWithCache(encoder: any Metal.MTLRenderCommandEncoder, customMatrix: CommonEntity.f4x4)
  @objc deinit
}
@_inheritsConvenienceInitializers open class HitTestableRect : SwiftyCreatives.RectanglePlanePrimitive<SwiftyCreatives.RectShapeInfo> {
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class HitTestablePrimitive<Info> : SwiftyCreatives.Primitive<Info> where Info : SwiftyCreatives.PrimitiveInfo {
  public var cachedCustomMatrix: CommonEntity.f4x4
  public func drawWithCache(encoder: any Metal.MTLRenderCommandEncoder, customMatrix: CommonEntity.f4x4)
  public func drawWithCache(packet: SwiftyCreatives.SCPacket)
  @objc deinit
}
public enum ImageAdjustOption {
  case basedOnWidth
  case basedOnHeight
  case basedOnLonger
  public static func == (a: SwiftyCreatives.ImageAdjustOption, b: SwiftyCreatives.ImageAdjustOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImageAdjuster {
  public static func adjustedScale(width: Swift.Float, height: Swift.Float, with option: SwiftyCreatives.ImageAdjustOption) -> CommonEntity.f3
}
public protocol ImageLoadable : SwiftyCreatives.ScaleSettable {
  var texture: (any Metal.MTLTexture)? { get set }
}
extension SwiftyCreatives.ImageLoadable {
  @discardableResult
  public func adjustScale(with option: SwiftyCreatives.ImageAdjustOption) -> Self
}
extension SwiftyCreatives.ImageLoadable {
  @discardableResult
  public func load(name: Swift.String, bundle: Foundation.Bundle?) -> Self
  @discardableResult
  public func load(image: CoreGraphics.CGImage) -> Self
  @discardableResult
  public func load(data: Foundation.Data) -> Self
}
extension SwiftyCreatives.ImageLoadable {
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func load(url: Foundation.URL) async -> Self
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func load(name: Swift.String, bundle: Foundation.Bundle?) async -> Self
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func load(data: Foundation.Data) async -> Self
  #endif
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class RectanglePlanePrimitive<Info> : SwiftyCreatives.HitTestablePrimitive<Info> where Info : SwiftyCreatives.PrimitiveInfo {
  public func hitTestGetPos(origin: CommonEntity.f3, direction: CommonEntity.f3, testDistance: Swift.Float = 3000) -> CommonEntity.f3?
  public func hitTestGetNormalizedCoord(origin: CommonEntity.f3, direction: CommonEntity.f3, testDistance: Swift.Float = 3000) -> CommonEntity.f2?
  @objc deinit
}
public protocol ScaleSettable : AnyObject {
  var scale: CommonEntity.f3 { get }
  @discardableResult
  func setScale(_ value: CommonEntity.f3) -> Self
}
public struct BoxInfo : SwiftyCreatives.PrimitiveInfo {
  @_hasMissingDesignatedInitializers final public class VertexPoint {
    @objc deinit
  }
  public static let primitiveType: Metal.MTLPrimitiveType
  public static let vertices: [CommonEntity.f3]
  public static let uvs: [CommonEntity.f2]
  public static let normals: [CommonEntity.f3]
}
public struct CircleInfo : SwiftyCreatives.PrimitiveInfo {
  public static var vertices: [CommonEntity.f3] {
    get
  }
  public static var uvs: [CommonEntity.f2]
  public static var normals: [CommonEntity.f3]
  public static let primitiveType: Metal.MTLPrimitiveType
  public static let indexBuffer: any Metal.MTLBuffer
}
public struct ModelObjectInfo : SwiftyCreatives.PrimitiveInfo {
  public static var vertices: [CommonEntity.f3]
  public static var uvs: [CommonEntity.f2]
  public static var normals: [CommonEntity.f3]
  public static let vertexCount: Swift.Int
  public static let primitiveType: Metal.MTLPrimitiveType
  public static let hasTexture: [Swift.Bool]
}
public protocol PrimitiveInfo {
  static var primitiveType: Metal.MTLPrimitiveType { get }
  static var vertices: [CommonEntity.f3] { get }
  static var uvs: [CommonEntity.f2] { get }
  static var normals: [CommonEntity.f3] { get }
}
public struct RectShapeInfo : SwiftyCreatives.PrimitiveInfo {
  public static var vertices: [CommonEntity.f3]
  public static var uvs: [CommonEntity.f2]
  public static var normals: [CommonEntity.f3]
  @_hasMissingDesignatedInitializers final public class VertexPoint {
    @objc deinit
  }
  public static let primitiveType: Metal.MTLPrimitiveType
}
public struct TriangleInfo : SwiftyCreatives.PrimitiveInfo {
  @_hasMissingDesignatedInitializers final public class VertexPoint {
    @objc deinit
  }
  public static let primitiveType: Metal.MTLPrimitiveType
  public static var vertices: [CommonEntity.f3]
  public static var uvs: [CommonEntity.f2]
  public static var normals: [CommonEntity.f3]
}
@_hasMissingDesignatedInitializers open class Primitive<Info> : SwiftyCreatives.ScaleSettable where Info : SwiftyCreatives.PrimitiveInfo {
  open var hasTexture: [Swift.Bool]
  open var isActiveToLight: [Swift.Bool]
  public var scale: CommonEntity.f3 {
    get
  }
  @discardableResult
  public func setScale(_ value: CommonEntity.f3) -> Self
  public func draw(_ encoder: any Metal.MTLRenderCommandEncoder)
  @discardableResult
  public func multiplyScale(_ value: Swift.Float) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers public class GeneralTextFactory : SwiftyCreatives.TextFactory {
  public init(font: CommonEntity.FontAlias, register characters: Swift.String, color: CommonEntity.ColorAlias)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NumberTextFactory : SwiftyCreatives.TextFactory {
  public init(font: CommonEntity.FontAlias, color: CommonEntity.ColorAlias)
  @objc deinit
}
extension SwiftyCreatives.TextFactory {
  public enum Template {
    public static let numbers: Swift.String
    public static let numerics: Swift.String
    public static let symbols: Swift.String
    public static let alphabets: Swift.String
    public static let hiragana: Swift.String
    public static let katakana: Swift.String
    public static let katakanaHalf: Swift.String
    public static let all: Swift.String
  }
}
@_hasMissingDesignatedInitializers public class TextFactory {
  @objc deinit
}
@_inheritsConvenienceInitializers open class TextObject : SwiftyCreatives.RectanglePlanePrimitive<SwiftyCreatives.RectShapeInfo> {
  public var originalTexture: (any Metal.MTLTexture)? {
    get
  }
  public var texture: (any Metal.MTLTexture)? {
    get
  }
  @discardableResult
  public func setColor(commandBuffer: any Metal.MTLCommandBuffer, _ value: CommonEntity.f4) -> Self
  @discardableResult
  public func setColor(commandBuffer: any Metal.MTLCommandBuffer, _ r: Swift.Float, _ g: Swift.Float, _ b: Swift.Float, _ a: Swift.Float) -> Self
  public init()
  @discardableResult
  public func setDetailedText(_ text: Swift.String, font: CommonEntity.FontAlias, resolution: CoreFoundation.CGSize, framePath: CoreGraphics.CGPath? = nil) -> Self
  @discardableResult
  public func setText(_ text: Swift.String, font: CommonEntity.FontAlias) -> Self
  @available(*, unavailable, message: "Use text() in Sketch instead.")
  override public func draw(_ encoder: any Metal.MTLRenderCommandEncoder)
  @objc deinit
}
@propertyWrapper public class SCAnimatable {
  public enum SCAnimationType {
    case linear
    case easeOut
    public static func == (a: SwiftyCreatives.SCAnimatable.SCAnimationType, b: SwiftyCreatives.SCAnimatable.SCAnimationType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var projectedValue: SwiftyCreatives.SCAnimatable {
    get
  }
  public init(wrappedValue: Swift.Float)
  public var wrappedValue: Swift.Float {
    get
    set
  }
  public var animationValue: Swift.Float {
    get
  }
  public func directSet(_ value: Swift.Float)
  public func update(multiplier: Swift.Float, with type: SwiftyCreatives.SCAnimatable.SCAnimationType = .easeOut)
  @objc deinit
}
public class AddRenderer<CameraConfig, DrawConfig> : SwiftyCreatives.RendererBase<CameraConfig, DrawConfig> where CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  public init(sketch: any SwiftyCreatives.SketchBase)
  @objc override public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
  @objc override public func draw(in view: MetalKit.MTKView)
  @objc deinit
}
public class RendererBase<CameraConfig, DrawConfig> : ObjectiveC.NSObject, MetalKit.MTKViewDelegate where CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  public var cachedTexture: (any Metal.MTLTexture)?
  public init(drawProcess: any SwiftyCreatives.SketchBase)
  @objc public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
  @objc public func draw(in view: MetalKit.MTKView)
  @objc deinit
}
public class NormalBlendRenderer<CameraConfig, DrawConfig> : SwiftyCreatives.RendererBase<CameraConfig, DrawConfig> where CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  public init(sketch: any SwiftyCreatives.SketchBase)
  @objc override public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreFoundation.CGSize)
  @objc override public func draw(in view: MetalKit.MTKView)
  @objc deinit
}
public class TransparentRenderer<CameraConfig, DrawConfig> : SwiftyCreatives.RendererBase<CameraConfig, DrawConfig> where CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  public init(sketch: any SwiftyCreatives.SketchBase)
  @objc override public func draw(in view: MetalKit.MTKView)
  @objc deinit
}
public enum ShaderCore {
  public static let device: any Metal.MTLDevice
  public static let library: any Metal.MTLLibrary
  public static let mainLibrary: (any Metal.MTLLibrary)?
  public static let commandQueue: any Metal.MTLCommandQueue
  public static let context: CoreImage.CIContext
  public static let textureLoader: MetalKit.MTKTextureLoader
  public static let defaultTextureLoaderOptions: [MetalKit.MTKTextureLoader.Option : Any]
}
extension SwiftyCreatives.FunctionBase {
  public func boldline(_ x1: Swift.Float, _ y1: Swift.Float, _ z1: Swift.Float, _ x2: Swift.Float, _ y2: Swift.Float, _ z2: Swift.Float, width: Swift.Float)
  public func boldline(_ pos1: CommonEntity.f3, _ pos2: CommonEntity.f3, width: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func box(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ scaleX: Swift.Float, _ scaleY: Swift.Float, _ scaleZ: Swift.Float)
  public func box(_ scale: Swift.Float)
  public func box(_ pos: CommonEntity.f3, _ scale: CommonEntity.f3)
  public func box(_ scaleX: Swift.Float, _ scaleY: Swift.Float, _ scaleZ: Swift.Float)
  public func box(_ scale: CommonEntity.f3)
}
extension SwiftyCreatives.FunctionBase {
  public func circle(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ radX: Swift.Float, _ radY: Swift.Float)
  public func circle(_ pos: CommonEntity.f3, _ radX: Swift.Float, _ radY: Swift.Float)
  public func circle(_ pos: CommonEntity.f3, _ rad: Swift.Float)
  public func circle(_ rad: Swift.Float)
  public func circle(_ radX: Swift.Float, _ radY: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func color(_ r: Swift.Float, _ g: Swift.Float, _ b: Swift.Float, _ a: Swift.Float)
  public func color(_ r: Swift.Float, _ g: Swift.Float, _ b: Swift.Float)
  public func color(_ color: CommonEntity.f4)
  public func color(_ rgb: CommonEntity.f3, alpha: Swift.Float)
  public func color(_ rgb: CommonEntity.f3)
  public func color(_ gray: Swift.Float)
  public func color(_ gray: Swift.Float, _ alpha: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func setFog(color: CommonEntity.f4, density: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func drawHitTestableBox(box: SwiftyCreatives.HitTestableBox)
}
extension SwiftyCreatives.FunctionBase {
  public func img(hitTestableImg: SwiftyCreatives.HitTestableImg)
}
extension SwiftyCreatives.FunctionBase {
  public func img(texture: any Metal.MTLTexture, with option: SwiftyCreatives.ImageAdjustOption)
  public func img(imgObj: SwiftyCreatives.Img)
}
extension SwiftyCreatives.FunctionBase {
  public func line(_ x1: Swift.Float, _ y1: Swift.Float, _ z1: Swift.Float, _ x2: Swift.Float, _ y2: Swift.Float, _ z2: Swift.Float)
  public func line(_ pos1: CommonEntity.f3, _ pos2: CommonEntity.f3)
}
extension SwiftyCreatives.FunctionBase {
  public func material(_ v: SwiftyCreatives.Material)
}
extension SwiftyCreatives.FunctionBase {
  public func mesh(_ vertices: [CommonEntity.f3], primitiveType: Metal.MTLPrimitiveType = .triangle)
  public func mesh(_ buffer: any Metal.MTLBuffer, count: Swift.Int, primitiveType: Metal.MTLPrimitiveType = .triangle)
  public func meshWithLight(_ vertices: [CommonEntity.f3], primitiveType: Metal.MTLPrimitiveType = .triangle)
}
extension SwiftyCreatives.FunctionBase {
  public func pushMatrix()
  public func popMatrix()
  public func push(_ process: () -> Swift.Void)
}
extension SwiftyCreatives.FunctionBase {
  public func rect(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ scaleX: Swift.Float, _ scaleY: Swift.Float)
  public func rect(_ pos: CommonEntity.f3, _ scaleX: Swift.Float, _ scaleY: Swift.Float)
  public func rect(_ pos: CommonEntity.f3, _ scale: Swift.Float)
  public func rect(_ scale: Swift.Float)
  public func rect(_ scale: CommonEntity.f3)
  public func rect(_ scaleX: Swift.Float, _ scaleY: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func rotate(_ rad: Swift.Float, axis: CommonEntity.f3)
  public func rotate(_ rad: Swift.Float, _ axisX: Swift.Float, _ axisY: Swift.Float, _ axisZ: Swift.Float)
  public func rotateX(_ rad: Swift.Float)
  public func rotateY(_ rad: Swift.Float)
  public func rotateZ(_ rad: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func scale(_ value: CommonEntity.f3)
  public func scale(_ value: Swift.Float)
  public func scale(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func text(_ textObj: SwiftyCreatives.TextObject)
}
extension SwiftyCreatives.FunctionBase {
  public func drawNumberText<T>(encoder: any Metal.MTLRenderCommandEncoder, factory: SwiftyCreatives.NumberTextFactory, number: T, spacing: Swift.Float = 1, scale: Swift.Float = 1) where T : Swift.Numeric
  public func drawGeneralText(encoder: any Metal.MTLRenderCommandEncoder, factory: SwiftyCreatives.TextFactory, text: Swift.String, spacing: Swift.Float = 1, scale: Swift.Float = 1, spacer: Swift.Float = 1, color: CommonEntity.f4 = .one)
}
extension SwiftyCreatives.FunctionBase {
  public func translate(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  public func translate(_ value: CommonEntity.f3)
}
extension SwiftyCreatives.FunctionBase {
  public func triangle(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ scaleX: Swift.Float, _ scaleY: Swift.Float)
  public func triangle(_ pos: CommonEntity.f3, _ scaleX: Swift.Float, _ scaleY: Swift.Float)
  public func triangle(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ scale: Swift.Float)
  public func triangle(_ scale: Swift.Float)
  public func triangle(_ scaleX: Swift.Float, _ scaleY: Swift.Float)
}
extension SwiftyCreatives.FunctionBase {
  public func polytext(_ vectorWord: SwiftyCreatives.VectorWord, primitiveType: Metal.MTLPrimitiveType = .triangle)
  public func polytext(_ vectorWord: SwiftyCreatives.VectorWord3D, primitiveType: Metal.MTLPrimitiveType = .triangle)
  public func char(_ character: Swift.Character, factory: SwiftyCreatives.VectorTextFactory, primitiveType: Metal.MTLPrimitiveType = .triangle, applyOffsetBefore: ((CommonEntity.f2) -> ())? = nil, applySizeAfter: ((CommonEntity.f2) -> ())? = nil)
  public func word(_ str: Swift.String, factory: SwiftyCreatives.VectorTextFactory)
}
public protocol FunctionBase : AnyObject {
  var privateEncoder: (any Metal.MTLRenderCommandEncoder)? { get set }
  var customMatrix: [CommonEntity.f4x4] { get set }
  var textPostProcessor: SwiftyCreatives.TextPostProcessor { get }
}
public class SCPacket : SwiftyCreatives.FunctionBase {
  public var privateEncoder: (any Metal.MTLRenderCommandEncoder)?
  public var customMatrix: [CommonEntity.f4x4]
  final public let textPostProcessor: SwiftyCreatives.TextPostProcessor
  public init(privateEncoder: any Metal.MTLRenderCommandEncoder, customMatrix: CommonEntity.f4x4)
  @objc deinit
}
open class Sketch : SwiftyCreatives.SketchBase, SwiftyCreatives.FunctionBase {
  public var metalDrawableSize: CommonEntity.f2
  final public let textPostProcessor: SwiftyCreatives.TextPostProcessor
  public var customMatrix: [CommonEntity.f4x4]
  public var privateEncoder: (any Metal.MTLRenderCommandEncoder)?
  public var deltaTime: Swift.Float
  public var frameRate: Swift.Float {
    get
  }
  public var packet: SwiftyCreatives.SCPacket {
    get
  }
  public var LIGHTS: [SwiftyCreatives.Light]
  public init()
  open func setupCamera(camera: some MainCameraBase)
  open func update(camera: some MainCameraBase)
  open func draw(encoder: any Metal.MTLRenderCommandEncoder)
  open func afterCommit(texture: (any Metal.MTLTexture)?)
  public func beforeDraw(encoder: any Metal.MTLRenderCommandEncoder)
  open func preProcess(commandBuffer: any Metal.MTLCommandBuffer)
  open func postProcess(texture: any Metal.MTLTexture, commandBuffer: any Metal.MTLCommandBuffer)
  public func getCustomMatrix() -> CommonEntity.f4x4
  open func updateAndDrawLight(encoder: any Metal.MTLRenderCommandEncoder)
  open func mouseMoved(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func mouseDown(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func mouseDragged(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func mouseUp(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func mouseEntered(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func mouseExited(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func keyDown(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func keyUp(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func viewWillStartLiveResize(camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func resize(withOldSuperviewSize oldSize: Foundation.NSSize, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func viewDidEndLiveResize(camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  open func scrollWheel(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol SketchBase : AnyObject {
  var deltaTime: Swift.Float { get set }
  var metalDrawableSize: CommonEntity.f2 { get set }
  func setupCamera(camera: some MainCameraBase)
  func update(camera: some MainCameraBase)
  func draw(encoder: any Metal.MTLRenderCommandEncoder)
  func updateAndDrawLight(encoder: any Metal.MTLRenderCommandEncoder)
  func beforeDraw(encoder: any Metal.MTLRenderCommandEncoder)
  func preProcess(commandBuffer: any Metal.MTLCommandBuffer)
  func postProcess(texture: any Metal.MTLTexture, commandBuffer: any Metal.MTLCommandBuffer)
  func afterCommit(texture: (any Metal.MTLTexture)?)
  func mouseMoved(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func mouseDown(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func mouseDragged(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func mouseUp(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func mouseEntered(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func mouseExited(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func keyDown(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func keyUp(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func viewWillStartLiveResize(camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func resize(withOldSuperviewSize oldSize: Foundation.NSSize, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func viewDidEndLiveResize(camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
  func scrollWheel(with event: AppKit.NSEvent, camera: some MainCameraBase, viewFrame: CoreFoundation.CGRect)
}
extension SwiftyCreatives.Sketch {
  public func mousePos(event: AppKit.NSEvent, viewFrame: Foundation.NSRect, isPerspective: Swift.Bool = true) -> CommonEntity.f2
}
public typealias NSSketchView = SwiftyCreatives.KitSketchView
public typealias FastAudioCapturer = SCSound.FastAudioCapturer
public typealias DetailedAudioCapturer = SCSound.DetailedAudioCapturer
precedencegroup ExponentPrecedence {
  associativity: left
  higherThan: MultiplicationPrecedence
  lowerThan: BitwiseShiftPrecedence
}
infix operator ^ : ExponentPrecedence
infix operator .+ : AdditionPrecedence
infix operator .- : AdditionPrecedence
public struct ConfigurableSketchView<CameraConfig, DrawConfig> : CommonEntity.ViewRepresentable where CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  public init(_ sketch: any SwiftyCreatives.SketchBase)
  @_Concurrency.MainActor(unsafe) public func makeNSView(context: SwiftyCreatives.ConfigurableSketchView<CameraConfig, DrawConfig>.Context) -> MetalKit.MTKView
  @_Concurrency.MainActor(unsafe) public func updateNSView(_ nsView: MetalKit.MTKView, context: SwiftyCreatives.ConfigurableSketchView<CameraConfig, DrawConfig>.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias NSViewType = MetalKit.MTKView
}
@_Concurrency.MainActor(unsafe) public class KitSketchView<DrawProcess, CameraConfig, DrawConfig> : SwiftyCreatives.TouchableMTKView<CameraConfig, DrawConfig> where DrawProcess : SwiftyCreatives.SketchBase, CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  @_Concurrency.MainActor(unsafe) public init(_ sketch: any SwiftyCreatives.SketchBase)
  @objc deinit
}
public struct SketchView : CommonEntity.ViewRepresentable {
  public init(_ sketch: any SwiftyCreatives.SketchBase)
  @_Concurrency.MainActor(unsafe) public func makeNSView(context: SwiftyCreatives.SketchView.Context) -> MetalKit.MTKView
  @_Concurrency.MainActor(unsafe) public func updateNSView(_ nsView: MetalKit.MTKView, context: SwiftyCreatives.SketchView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias NSViewType = MetalKit.MTKView
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TouchableMTKView<CameraConfig, DrawConfig> : MetalKit.MTKView where CameraConfig : SwiftyCreatives.CameraConfigBase, DrawConfig : SwiftyCreatives.DrawConfigBase {
  @_Concurrency.MainActor(unsafe) public var renderer: SwiftyCreatives.RendererBase<CameraConfig, DrawConfig>
  @_Concurrency.MainActor(unsafe) public init(renderer: SwiftyCreatives.RendererBase<CameraConfig, DrawConfig>)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var acceptsFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func mouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func mouseMoved(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func mouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func mouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func mouseEntered(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func mouseExited(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func keyDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func keyUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillStartLiveResize()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resize(withOldSuperviewSize oldSize: Foundation.NSSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidEndLiveResize()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func scrollWheel(with event: AppKit.NSEvent)
}
extension SwiftyCreatives.BlendMode : Swift.Equatable {}
extension SwiftyCreatives.BlendMode : Swift.Hashable {}
extension SwiftyCreatives.ImageAdjustOption : Swift.Equatable {}
extension SwiftyCreatives.ImageAdjustOption : Swift.Hashable {}
extension SwiftyCreatives.SCAnimatable.SCAnimationType : Swift.Equatable {}
extension SwiftyCreatives.SCAnimatable.SCAnimationType : Swift.Hashable {}
